{"version":3,"sources":["components/section/index.jsx","constants.js","lib/index.js","App.js","serviceWorker.js","index.js"],"names":["Section","displayContent","row","col","data","onRevealSections","onFlag","status","content","revealedClass","rel","aria-label","className","onClick","e","preventDefault","onContextMenu","DIFFICULTY","FIELD_WIDTH","FIELD_HEIGHT","updateField","field","cb","map","rowArr","rowIdx","section","colIdx","newSection","timerID","setDifficulty","App","useState","tempDifficulty","setTempDifficulty","setField","gameWon","setGameWon","gameLost","setGameLost","seconds","setSeconds","fieldStyle","width","savedCallback","useRef","startNewGame","useCallback","initialField","Math","random","push","initializeField","r","c","calculateBombCounts","clearInterval","setInterval","current","callback","handleFlag","newField","revealSection","andNeighbors","revealNeighbors","hasWonGame","endGame","handleRevealSections","useEffect","minutesStr","secondsStr","minutes","floor","secs","onChange","target","value","role","style","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gRAsDeA,I,IAAAA,EAnDf,YAAiE,IAezDC,EAfYC,EAA4C,EAA5CA,IAAKC,EAAuC,EAAvCA,IAAKC,EAAkC,EAAlCA,KAAMC,EAA4B,EAA5BA,iBAAkBC,EAAU,EAAVA,OAC1CC,EAAoBH,EAApBG,OAAQC,EAAYJ,EAAZI,QAeZC,EAAgB,GACpB,OAAOF,GACH,IAAK,IACDE,EAAgB,YAEZR,GADa,IAAbO,EACiB,0BAAME,IAAI,MAAMC,aAAW,QAA3B,gBACE,IAAZH,EACU,KAEAA,EAErB,MAEJ,IAAK,IACDP,EAAiB,0BAAMS,IAAI,MAAMC,aAAW,YAA3B,gBACjB,MAEJ,IAAK,IACDF,EAAgB,YAChBR,EAAiB,0BAAMS,IAAI,MAAMC,aAAW,aAA3B,gBACjB,MAEJ,QACIV,EAAiB,GAKzB,OACI,yBAAKW,UAAS,iBAAYH,GAAiBI,QA1C/C,SAA0BC,GACtBA,EAAEC,iBACa,MAAXR,GACJF,EAAiBH,EAAKC,IAuC+Ca,cApCzE,SAA2BF,GACvBA,EAAEC,iBACa,MAAXR,GACJD,EAAOJ,EAAKC,KAkCNF,I,OCjDDgB,EACH,OADGA,EAEJ,MAFIA,EAGH,OAGGC,GAAW,mBACnBD,EAAkB,GADC,cAEnBA,EAAiB,IAFE,cAGnBA,EAAkB,IAHC,GAKXE,GAAY,mBACpBF,EAAkB,GADE,cAEpBA,EAAiB,IAFG,cAGpBA,EAAkB,IAHE,GCyClB,SAASG,EAAaC,EAAOnB,EAAKC,EAAKmB,GAC5C,OAAOD,EAAME,KAAI,SAACC,EAAQC,GACxB,OAAOD,EAAOD,KAAI,SAACG,EAASC,GAC1B,IAAIC,EAAU,eAAOF,GAIrB,OAHIxB,IAAQuB,GAAUtB,IAAQwB,IAC5BC,EAAaN,EAAGM,IAEXA,Q,UC9CTC,EADAC,EAAgBb,EAgLLc,MA7Kf,WAAgB,IAAD,EAC+BC,mBAASf,GADxC,mBACNgB,EADM,KACUC,EADV,OAEaF,mBAAS,IAFtB,mBAENX,EAFM,KAECc,EAFD,OAGiBH,oBAAS,GAH1B,mBAGNI,EAHM,KAGGC,EAHH,OAImBL,oBAAS,GAJ5B,mBAINM,EAJM,KAIIC,EAJJ,OAKiBP,mBAAS,GAL1B,mBAKNQ,EALM,KAKGC,EALH,KAOPC,EAAa,CACjBC,MAAM,GAAD,OAAkC,GAA7BzB,EAAYY,GAAjB,OAGDc,EAAgBC,mBAEhBC,EAAeC,uBAAY,WAC/BjB,EAAgBG,EAGhBI,GAAW,GACXE,GAAY,GACZE,EAAW,GAGX,IAAIO,EDnCD,SAAyBlB,GAI9B,IAHA,IAAIkB,EAAe,GAGVvB,EAAS,EAAGA,EAASN,EAAaW,GAAgBL,IAAU,CAEnE,IADA,IAAIvB,EAAM,GACDyB,EAAS,EAAGA,EAAST,EAAYY,GAAgBH,IAAU,CAClE,IAAMnB,EAAWyC,KAAKC,UDOH,KCP6B,EAAI,EACpDhD,EAAIiD,KAAK,CAAE5C,OAAQ,IAAKC,YAE1BwC,EAAaG,KAAKjD,GAGpB,OAAO8C,ECsBcI,CAAgBtB,GACnCkB,EDpBG,SAA6B3B,EAAOS,GACzC,IAAK,IAAIL,EAAS,EAAGA,EAASN,EAAaW,GAAgBL,IACzD,IAAK,IAAIE,EAAS,EAAGA,EAAST,EAAYY,GAAgBH,IACxD,GAAsC,IAAlCN,EAAMI,GAAQE,GAAQnB,QACxB,IAAK,IAAI6C,EAAI5B,EAAS,EAAG4B,GAAK5B,EAAS,EAAG4B,IACxC,IAAK,IAAIC,EAAI3B,EAAS,EAAG2B,GAAK3B,EAAS,EAAG2B,IACpCjC,EAAMgC,IAAMhC,EAAMgC,GAAGC,KAAOD,IAAM5B,GAAU6B,IAAM3B,KACvB,IAAzBN,EAAMgC,GAAGC,GAAG9C,SACda,EAAMI,GAAQE,GAAQnB,UAQpC,OAAOa,ECIUkC,CAAoBP,EAAclB,GAEjD0B,cAAc3B,GACdA,EAAU4B,aAAY,WAAQb,EAAcc,YAAa,KAEzDvB,EAASa,KACR,CAACf,IAMJ,SAAS0B,IACPlB,EAAWD,EAAU,GAOvB,SAASoB,EAAY1D,EAAKC,GACxB,IAAIiC,EAAJ,CACA,IAAMyB,EAAWzC,EAAYC,EAAOnB,EAAKC,GAAK,SAAAuB,GAM5C,MALuB,MAAnBA,EAAQnB,OACVmB,EAAQnB,OAAS,IAEjBmB,EAAQnB,OAAS,IAEZmB,KAETS,EAAS0B,IAGX,SAASC,EAAe5D,EAAKC,EAAK4D,GAChC,IAAiC,IAA7B1C,EAAMnB,GAAKC,GAAKK,QAApB,CAIA,IAAMqD,EAAWzC,EAAYC,EAAOnB,EAAKC,GAAK,SAAAuB,GAE5C,OADAA,EAAQnB,OAAS,IACVmB,KAELqC,GD3CD,SAASC,EAAgBH,EAAU3D,EAAKC,GAC7C,IAAK,IAAIkD,EAAInD,EAAM,EAAGmD,GAAKnD,EAAM,EAAGmD,IAClC,IAAK,IAAIC,EAAInD,EAAM,EAAGmD,GAAKnD,EAAM,EAAGmD,IAC9BO,EAASR,IAAMQ,EAASR,GAAGC,KAAOD,IAAMnD,GAAOoD,IAAMnD,KACvB,IAA5B0D,EAASR,GAAGC,GAAG9C,SAA4C,MAA1BqD,EAASR,GAAGC,GAAG/C,SAClDsD,EAASR,GAAGC,GAAG/C,OAAS,IACO,IAA3BsD,EAASR,GAAGC,GAAG9C,SACjBwD,EAAgBH,EAAUR,EAAGC,ICqCnCU,CAAgBH,EAAU3D,EAAKC,GAEjCgC,EAAS0B,GDnBN,SAAoBxC,EAAOS,GAChC,IAAK,IAAI5B,EAAM,EAAGA,EAAMiB,EAAaW,GAAgB5B,IACnD,IAAK,IAAIC,EAAM,EAAGA,EAAMe,EAAYY,GAAgB3B,IAClD,IAAiC,IAA7BkB,EAAMnB,GAAKC,GAAKK,SAA6C,MAA3Ba,EAAMnB,GAAKC,GAAKI,OACpD,OAAO,EAIb,OAAO,ECYD0D,CAAWJ,EAAU/B,KACvB0B,cAAc3B,GACdQ,GAAW,SAbX6B,IAiBJ,SAASC,EAAsBjE,EAAKC,GAE9BiC,GAAWE,KAEkB,IAA7BjB,EAAMnB,GAAKC,GAAKK,QAElB0D,EAAQhE,EAAKC,GACwB,IAA5BkB,EAAMnB,GAAKC,GAAKK,QAEzBsD,EAAc5D,EAAKC,GAAK,GAGxB2D,EAAc5D,EAAKC,IAIvB,SAAS+D,EAAQhE,EAAKC,GACpBqD,cAAc3B,GACd,IAAMgC,EAAWxC,EAAME,KAAI,SAACC,EAAQC,GAClC,OAAOD,EAAOD,KAAI,SAACG,EAASC,GAC1B,IAAIC,EAAU,eAAQF,GAMtB,OAJEE,EAAWrB,OADTL,IAAQuB,GAAUtB,IAAQwB,EACR,IAEA,IAEfC,QAGXO,EAAS0B,GACTtB,GAAY,GA1Ed6B,qBAAU,WACRxB,EAAcc,QAAUC,KA4E1B,IAGIU,EACAC,EAJEC,EAAUtB,KAAKuB,MAAMhC,EAAU,IAC/BiC,EAAOjC,EAAU,GAgBvB,OAVE6B,EADEE,EAAU,GACF,WAAOA,GAEJA,EAGbD,EADEG,EAAO,GACC,WAAOA,GAEJA,EAIb,yBAAK7D,UAAU,OACb,2CAEA,2BACE,4BAAQC,QAASiC,GAAjB,oBADF,eAGE,4BAAQ4B,SA7Fd,SAA0B5D,GACxBoB,EAAkBpB,EAAE6D,OAAOC,QA4FaA,MAAO3C,GACzC,4BAAQ2C,MAAO3D,GAAf,QACA,4BAAQ2D,MAAO3D,GAAf,UACA,4BAAQ2D,MAAO3D,GAAf,SANJ,mBAWA,uBAAGL,UAAU,gBAAb,qBACoB,6BADpB,qBAKA,sCACQ,8BAAOyD,EAAP,IAAoBC,IAG1BlC,EAAU,wBAAIxB,UAAU,YAAd,YAAkC,0BAAMiE,KAAK,MAAMlE,aAAW,cAA5B,iBAA0D,KAEtG2B,EAAW,wBAAI1B,UAAU,aAAd,YAAmC,0BAAMiE,KAAK,MAAMlE,aAAW,YAA5B,iBAAwD,KAExG,yBAAKC,UAAU,QAAQkE,MAAOpC,GAE1BrB,EAAME,KAAI,SAACrB,EAAKuB,GACd,OAAOvB,EAAIqB,KAAI,SAACnB,EAAMuB,GACpB,OACE,kBAAC,EAAD,CAASvB,KAAMA,EACN2E,IAAG,WAAMtD,EAAN,YAAgBE,GACnBzB,IAAKuB,EACLtB,IAAKwB,EACLrB,OAAQsD,EACRvD,iBAAkB8D,aCtKvBa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.620c7490.chunk.js","sourcesContent":["import React from 'react';\nimport './index.css';\n\nfunction Section ({ row, col, data, onRevealSections, onFlag }) {\n    const { status, content } = data;\n\n    function handleLeftClick (e) {\n        e.preventDefault();\n        if (status === 'f') return;\n        onRevealSections(row, col);\n    }\n\n    function handleRightClick (e) {\n        e.preventDefault();\n        if (status === 'r') return;\n        onFlag(row, col);\n    }\n\n    let displayContent;\n    let revealedClass = '';\n    switch(status) {\n        case 'r': {\n            revealedClass = ' revealed';\n            if (content === -1) {\n                displayContent = <span rel=\"img\" aria-label=\"bomb\">ðŸ’£</span>;\n            } else if (content === 0) {\n                displayContent = null;\n            } else {\n                displayContent = content;\n            }\n            break;\n        }\n        case 'f': {\n            displayContent = <span rel=\"img\" aria-label=\"red flag\">ðŸš©</span>\n            break;\n        }\n        case 'e': {\n            revealedClass = ' revealed';\n            displayContent = <span rel=\"img\" aria-label=\"explosion\">ðŸ’¥</span>;\n            break;\n        }\n        default: {\n            displayContent = '';\n            break;\n        }\n    }\n\n    return (\n        <div className={`section${revealedClass}`} onClick={handleLeftClick} onContextMenu={handleRightClick}>\n            { displayContent }\n        </div>\n    )\n}\n\nexport default Section;\n","export const DIFFICULTY = {\n    EASY: 'EASY',\n    MED: 'MED',\n    HARD: 'HARD',\n}\n\nexport const FIELD_WIDTH = {\n    [DIFFICULTY.EASY]: 5,\n    [DIFFICULTY.MED]: 10,\n    [DIFFICULTY.HARD]: 25\n};\nexport const FIELD_HEIGHT = {\n    [DIFFICULTY.EASY]: 5,\n    [DIFFICULTY.MED]: 10,\n    [DIFFICULTY.HARD]: 15\n}\nexport const BOMB_FREQ = .15;\n","import { FIELD_WIDTH, FIELD_HEIGHT, BOMB_FREQ } from '../constants';\n\nexport function initializeField(setDifficulty) {\n  let initialField = [];\n\n  // Set the intial field state with bombs\n  for (let rowIdx = 0; rowIdx < FIELD_HEIGHT[setDifficulty]; rowIdx++) {\n    let row = [];\n    for (let colIdx = 0; colIdx < FIELD_WIDTH[setDifficulty]; colIdx++) {\n      const content = (Math.random() <= BOMB_FREQ) ? -1 : 0;\n      row.push({ status: 'h', content });\n    }\n    initialField.push(row);\n  }\n\n  return initialField;\n}\n\nexport function calculateBombCounts(field, setDifficulty) {\n  for (let rowIdx = 0; rowIdx < FIELD_HEIGHT[setDifficulty]; rowIdx++) {\n    for (let colIdx = 0; colIdx < FIELD_WIDTH[setDifficulty]; colIdx++) {\n      if (field[rowIdx][colIdx].content === 0) {\n        for (let r = rowIdx - 1; r <= rowIdx + 1; r++) {\n          for (let c = colIdx - 1; c <= colIdx + 1; c++) {\n            if (field[r] && field[r][c] && (r !== rowIdx || c !== colIdx)) {\n              if (field[r][c].content === -1) {\n                field[rowIdx][colIdx].content++;\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  return field;\n}\n\nexport function revealNeighbors(newField, row, col) {\n  for (let r = row - 1; r <= row + 1; r++) {\n    for (let c = col - 1; c <= col + 1; c++) {\n      if (newField[r] && newField[r][c] && (r !== row || c !== col)) {\n        if (newField[r][c].content !== -1 && newField[r][c].status === 'h') {\n          newField[r][c].status = 'r';\n          if (newField[r][c].content === 0) {                \n            revealNeighbors(newField, r, c);\n          }\n        }\n      }\n    }\n  }\n}\n\nexport function updateField (field, row, col, cb) {\n  return field.map((rowArr, rowIdx) => {\n    return rowArr.map((section, colIdx) => {\n      let newSection = {...section};\n      if (row === rowIdx && col === colIdx) {\n        newSection = cb(newSection);\n      }\n      return newSection;\n    });\n  });\n}\n\nexport function hasWonGame(field, setDifficulty) {\n  for (let row = 0; row < FIELD_HEIGHT[setDifficulty]; row++) {\n    for (let col = 0; col < FIELD_WIDTH[setDifficulty]; col++) {\n      if (field[row][col].content !== -1 && field[row][col].status === 'h') {\n        return false;\n      }\n    }\n  }\n  return true;\n}","import React, { useState, useCallback, useEffect, useRef } from 'react';\nimport Section from './components/section';\nimport {\n  calculateBombCounts,\n  hasWonGame,\n  initializeField,\n  revealNeighbors,\n  updateField\n} from './lib';\nimport { DIFFICULTY, FIELD_WIDTH, FIELD_HEIGHT, BOMB_FREQ } from './constants';\nimport './App.css';\n\nlet setDifficulty = DIFFICULTY.MED;\nlet timerID;\n\nfunction App() {\n  const [tempDifficulty, setTempDifficulty] = useState(DIFFICULTY.MED);\n  const [field, setField] = useState([]);\n  const [gameWon, setGameWon] = useState(false);\n  const [gameLost, setGameLost] = useState(false);\n  const [seconds, setSeconds] = useState(0);\n\n  const fieldStyle = {\n    width: `${FIELD_WIDTH[setDifficulty] * 34}px`,\n  }\n\n  const savedCallback = useRef();\n\n  const startNewGame = useCallback(() => {\n    setDifficulty = tempDifficulty;\n\n    // Clear out the won/lost states\n    setGameWon(false);\n    setGameLost(false);\n    setSeconds(0);\n\n    // Initialize the mine field\n    let initialField = initializeField(setDifficulty);\n    initialField = calculateBombCounts(initialField, setDifficulty);\n\n    clearInterval(timerID);\n    timerID = setInterval(() => { savedCallback.current() }, 1000);\n    \n    setField(initialField);\n  }, [tempDifficulty]);\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  });\n\n  function callback() {\n    setSeconds(seconds + 1);\n  }\n\n  function changeDifficulty(e) {\n    setTempDifficulty(e.target.value);\n  }\n\n  function handleFlag (row, col) {\n    if (gameWon) return;\n    const newField = updateField(field, row, col, section => {\n      if (section.status === 'f') {\n        section.status = 'h';\n      } else {\n        section.status = 'f';\n      }\n      return section;\n    });\n    setField(newField);\n  }\n\n  function revealSection (row, col, andNeighbors) {\n    if (field[row][col].content === -1) {\n      endGame();\n      return;\n    }\n    const newField = updateField(field, row, col, section => {\n      section.status = 'r';\n      return section;\n    });\n    if (andNeighbors) {\n      revealNeighbors(newField, row, col);\n    }\n    setField(newField);\n    if (hasWonGame(newField, setDifficulty)) {\n      clearInterval(timerID);\n      setGameWon(true);\n    }\n  }\n\n  function handleRevealSections (row, col) {\n    // If the game has been won or lost, don't reveal the section\n    if (gameWon || gameLost) return;\n\n    if (field[row][col].content === -1) {\n      // We revealed a bomb!\n      endGame(row, col);\n    } else if (field[row][col].content === 0) {\n      // section is empty with no neighboring bombs, reveal neighboring sections\n      revealSection(row, col, true);\n    } else {\n      // section is empty with neighboring bombs, just reveal itself\n      revealSection(row, col);\n    }\n  }\n\n  function endGame(row, col) {\n    clearInterval(timerID);\n    const newField = field.map((rowArr, rowIdx) => {\n      return rowArr.map((section, colIdx) => {\n        let newSection = { ...section };\n        if (row === rowIdx && col === colIdx) {\n          newSection.status = 'e';\n        } else {\n          newSection.status = 'r';\n        }\n        return newSection;\n      });\n    });\n    setField(newField);\n    setGameLost(true);\n  }\n\n  const minutes = Math.floor(seconds / 60);\n  const secs = seconds % 60;\n\n  let minutesStr;\n  let secondsStr;\n\n  if (minutes < 10) {\n    minutesStr = `0${minutes}`;\n  } else {\n    minutesStr = minutes;\n  }\n  if (secs < 10) {\n    secondsStr = `0${secs}`\n  } else {\n    secondsStr = secs;\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Minesweeper</h1>\n\n      <p>\n        <button onClick={startNewGame}>Start a New Game</button>\n        &nbsp;with&nbsp;\n        <select onChange={changeDifficulty} value={tempDifficulty}>\n          <option value={DIFFICULTY.EASY}>Easy</option>\n          <option value={DIFFICULTY.MED}>Medium</option>\n          <option value={DIFFICULTY.HARD}>Hard</option>\n        </select>\n        &nbsp;difficulty.\n      </p>\n\n      <p className=\"instructions\">\n        Left Click: Reveal<br />\n        Right Click: Flag\n      </p>\n\n      <div>\n        Time: <span>{minutesStr}:{secondsStr}</span>\n      </div>\n\n      { gameWon ? <h2 className=\"game-won\">You Won! <span role=\"img\" aria-label=\"happy face\">ðŸ˜„</span></h2> : null }\n\n      { gameLost ? <h2 className=\"game-lost\">You Lost <span role=\"img\" aria-label=\"sad face\">ðŸ˜¢</span></h2> : null }\n\n      <div className=\"field\" style={fieldStyle}>\n        {\n          field.map((row, rowIdx) => {\n            return row.map((data, colIdx) => {\n              return (\n                <Section data={data}\n                         key={`r${rowIdx}c${colIdx}`}\n                         row={rowIdx}\n                         col={colIdx}\n                         onFlag={handleFlag}\n                         onRevealSections={handleRevealSections} />\n              )\n            });\n          })\n        }\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}